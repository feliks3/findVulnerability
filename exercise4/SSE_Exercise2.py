import numpy as np
import pandas as pd
import os
import datetime

showflag = False

'''
https://github.com/jenkinsci/jenkins
7b1f8e96a8d97dd09e5e093fcdb010b3295acc77



'''

# Specify git executable file for GitPython in Jupyter Notebook (In IDE, it can still work without this line.)
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "C:\Program Files\Git\cmd\git.exe"
os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/usr/bin/git"
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (3.0.2)"

import git
from git import RemoteProgress

from git import Repo
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

class Progress(RemoteProgress):
    def update(self, op_code, cur_count, max_count=None, message=''):
        print(self._cur_line)
'''
remote_link = "https://github.com/jenkinsci/jenkins"
local_link = "jenkins"
fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
'''

remote_link = "https://github.com/apache/struts"
local_link = "struts"
fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"



'''
remote_link = "https://github.com/apache/cxf-fediz"
local_link = "cxf-fediz"
fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"
'''






# Uncomment to clone
# Repo.clone_from(remote_link, local_link, progress=Progress())

repo = Repo(local_link)
repo.git.checkout(fixing_commit)

def getMessage1():

    print()
    print()
    print("--------------------------1----------------------------")
    print("| What was the message and title of the fixing commit |")
    print("-------------------------------------------------------")

    show_data = repo.git.show("-s", fixing_commit).splitlines()
    comments = ""
    count = 0
    for line in show_data:
        count = count + 1
        if count == 3:
            print("The message and title of the fixing commit is:")
        if count <= 3:
            continue
        print(line)


def getFilelist():

    show_data = repo.git.show(fixing_commit).splitlines()
    comments = ""
    filenum = 0
    diff = []
    filename = ""
    filelist = []
    for line in show_data:
        if line[0:4] == "diff":
            filenum = filenum + 1
            diff = line.split(" ")
            filename = diff[2][diff[2].index("/") + 1 : len(diff[2])]
            filelist.append(filename)

    return filelist


def getLimitFilelist():

    return getFilelist()

    filelist = getFilelist()
    limitFilelist = []
    filenum = 0
    for line in filelist:
        filenum = filenum + 1
        if filenum >= 6:
            break
        limitFilelist.append(line)

    return limitFilelist

def getMessage2():
    print()
    print()
    print("--------------------------2---------------------------------")
    print("| How many total files were affected in the fixing commit? |")
    print("------------------------------------------------------------")

    filelist = getLimitFilelist()
    print(len(filelist))
    print("they are:")
    for filename in filelist:
        print(filename)



def getMessage3():
    print()
    print()
    print("-----------------------------3------------------------------------")
    print("| How many total directories were affected in the fixing commit? |")
    print("------------------------------------------------------------------")



    folderlist = []
    foldername = ""
    filelist = getFilelist()
    for filename in filelist:
        foldername = filename[filename.index("/") + 1: filename.rindex("/")]
        if foldername not in folderlist:
            folderlist.append(foldername)

    print(len(folderlist))

    print("they are:")
    for line in folderlist:
        print(line)

def getMessage4():
    print()
    print()
    print("---------------------------------------4-------------------------------------------")
    print("| How many total lines of code (including comments and blank lines) were deleted? |")
    print("-----------------------------------------------------------------------------------")


    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "-" and line[0:3] != "---":
            difflines.append(line)

    print(len(difflines))


def getMessage5():
    print()
    print()
    print("-------------------------------------5-------------------------------------------")
    print("| How many total lines of code (including comments and blank lines) were added? |")
    print("---------------------------------------------------------------------------------")

    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "+" and line[0:3] != "+++":
            difflines.append(line)

    print(len(difflines))


def getMessage6():
    print()
    print()
    print("-------------------------------------6--------------------------------------------")
    print("| How many total lines of code (excluding comments and blank lines) were deleted? |")
    print("----------------------------------------------------------------------------------")


    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "-" and line[0:3] != "---":
            if(line.replace("-","").replace(" ","") == ""):
                continue
            if line.replace(" ","")[0:2] == "-*" or line.replace(" ","")[0:2] == "-/*" or line.replace(" ","")[0:3] == "-//" :
                continue
            difflines.append(line)

    print(len(difflines))

def getMessage7():
    print()
    print()
    print("-------------------------------------7-------------------------------------------")
    print("| How many total lines of code (excluding comments and blank lines) were added? |")
    print("---------------------------------------------------------------------------------")

    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "+" and line[0:3] != "+++":
            if(line.replace("-","").replace(" ","") == ""):
                continue
            if line.replace(" ","")[0:2] == "+*" or line.replace(" ","")[0:2] == "+/*" or line.replace(" ","")[0:3] == "+//" :
                continue
            difflines.append(line)

    print(len(difflines))

def getMessage8():
    print()
    print()
    print("----------------------------------------------8--------------------------------------------------------")
    print("| How many days were between the current fixing commit and the previous commit of each affected file? |")
    print("-------------------------------------------------------------------------------------------------------")

    filelist = getLimitFilelist()
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", filename).splitlines()
        print()
        print("filename is :" + filename)

        flag = 0
        currentTime = ""
        preTime = ""
        for line in log_data:
            if flag == 1:
                elements = line.split(" ")
                preTime = elements[1][0:10]
                break
            if line[1:9] == fixing_commit[0:8]:
                elements = line.split(" ")
                currentTime = elements[1][0:10]
                flag = 1
        if preTime == "":
            print("there is no previous commit for this file")
        else:

            print("current commit time is :" + currentTime)
            print("previous commit time is :" + preTime)
            d1 = datetime.datetime(int(currentTime[0:4]),int(currentTime[5:7]),int(currentTime[8:10]))   # 第一个日期
            d2 = datetime.datetime(int(preTime[0:4]),int(preTime[5:7]),int(preTime[8:10]))   # 第二个日期
            interval = d1 - d2
            print(str(interval.days) + " days were between the current fixing commit and the previous commit")


def getMessage9():
    print()
    print()
    print("---------------------------------------9----------------------------------")
    print(" How many time has each affected file of the current fixing commit been   ")
    print(" modified in the past since their creation (including rename of the file)?")
    print("--------------------------------------------------------------------------")


    filelist = getLimitFilelist()
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()
        print()
        print("filename is :" + filename)

        print(str(len(log_data)) + " times")


def getTotalAuthorList():
    total_author_list = []
    filelist = getFilelist()
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()

        flag = 0
        currentTime = ""
        preTime = ""
        for line in log_data:
            if line[1:len(line) - 1] not in total_author_list:
                total_author_list.append(line[1:len(line) - 1])
    return total_author_list

def getMessage10():
    print()
    print()
    print("-------------------------------10---------------------------------------")
    print("Which developers have modified each affected file since its creation")
    print("----------------------------------------------------------------------")

    filelist = getLimitFilelist()
    totalnum = 0
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()
        print()
        print("filename is :" + filename)

        flag = 0
        currentTime = ""
        preTime = ""
        author_list = []
        for line in log_data:
            if line[1:len(line) - 1] not in author_list:
                author_list.append(line[1:len(line) - 1])

        totalnum = totalnum + len(author_list)
        print("the author is:")
        for line in author_list:
            print(line)
#    print("average num:")
#    print(totalnum/len(filelist))

def getMessage11():
    print()
    print()
    print("-------------------------------11---------------------------------------")
    print(" how many commits have each of them submitted?")
    print(" are the involving developers experienced or new ones or both?")
    print("----------------------------------------------------------------------")


    total_author_list = getTotalAuthorList()
    for author_name in total_author_list:
        print()
        print(author_name)
        log_data = repo.git.log("--oneline", "--author=" + author_name)
        print(str(len(log_data)) + " commits")
        if len(log_data) > 100:
            print("experienced")
        else:
            print("new ones")

#    print("total_author_list:")
#    print(len(total_author_list))

def outputMessage():

    getMessage1()
    getMessage2()
    getMessage3()
    getMessage4()
    getMessage5()
    getMessage6()
    getMessage7()
    getMessage8()
    getMessage9()
    getMessage10()
    getMessage11()


def changeConfigue(param):
    global remote_link
    global local_link
    global fixing_commit
    global repo

    if param == 1:
        print()
        print("==================================jenkins==========================================")
        print()
        remote_link = "https://github.com/jenkinsci/jenkins"
        local_link = "jenkins"
        fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 2:
        print()
        print("==================================struts==========================================")
        print()
        remote_link = "https://github.com/apache/struts"
        local_link = "struts"
        fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 3:
        print()
        print("===================================cxf-fediz=========================================")
        print()
        remote_link = "https://github.com/apache/cxf-fediz"
        local_link = "cxf-fediz"
        fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)

'''
changeConfigue(1)
outputMessage()
'''
'''
changeConfigue(2)
outputMessage()
'''

changeConfigue(1)
outputMessage()
