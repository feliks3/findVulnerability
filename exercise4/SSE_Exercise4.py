import numpy as np
import pandas as pd
import os
import datetime

showflag = False


# Specify git executable file for GitPython in Jupyter Notebook (In IDE, it can still work without this line.)
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "C:\Program Files\Git\cmd\git.exe"
os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/usr/bin/git"
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (3.0.2)"

import git
from git import RemoteProgress

from git import Repo
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

class Progress(RemoteProgress):
    def update(self, op_code, cur_count, max_count=None, message=''):
        print(self._cur_line)

"""
remote_link = "https://github.com/apache/cxf-fediz"
local_link = "cxf-fediz_3"
fixing_commit = "c68e4820816c19241568f4a8fe8600bffb0243cd"
vcc_fixing_commit = "f0259cf598f2b078634af44b37d9e301b487d29e"
"""


remote_link = "https://github.com/apache/jackrabbit"
local_link = "jackrabbit_3"
fixing_commit = "db26ade17d791bbb4e4771ed9650ec1159a541ff"
vcc_fixing_commit = "c38ebb9b69418f211151e23e2b652921d27b6c96"
"""
remote_link = "https://github.com/apache/storm"
local_link = "storm_3"
fixing_commit = "f61e5daf299d6c37c7ad65744d02556c94a16a4"
vcc_fixing_commit = "7029aee576cff6d7159e9e1a991bb02aaf0d4cd8"

remote_link = "https://github.com/jenkinsci/jenkins"
local_link = "jenkins"
fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
vcc_fixing_commit = "7b1f8e96a8d"

remote_link = "https://github.com/apache/struts"
local_link = "struts"
fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"
vcc_fixing_commit = "0c543aef31"

remote_link = "https://github.com/apache/cxf-fediz"
local_link = "cxf-fediz"
fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"
vcc_fixing_commit = "cc36307d5"
"""


# Uncomment to clone
# Repo.clone_from(remote_link, local_link, progress=Progress())

repo = Repo(local_link)
repo.git.checkout(fixing_commit)

def getMessage1():

    print()
    print()
    print("--------------------------1----------------------------")
    print("| check the developer |")
    print("-------------------------------------------------------")

    show_data = repo.git.show("-s", fixing_commit).splitlines()
    author1 = ""
    for line in show_data:
        if line[0:6] == "Author":
            author1 = line
            break
    print(author1)

    show_data = repo.git.show("-s", vcc_fixing_commit).splitlines()

    author2 = ""
    for line in show_data:
        if line[0:6] == "Author":
            author2 = line
            break
    print(author2)

    if author1 == author2:
        print("The developer of the current fixing commit and its corresponding VCC the same")
        print(author1)
    else:
        print("not the same")


def getMessage2():

    print()
    print()
    print("--------------------------2----------------------------")
    print("| check the date |")
    print("-------------------------------------------------------")



    log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", fixing_commit).splitlines()
    vcc_log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", vcc_fixing_commit).splitlines()

    currentTime = ""
    preTime = ""

    for filename in log_data:
        if filename[1:9] == fixing_commit[0:8]:
            elements = filename.split(" ")
            currentTime = elements[1][0:10]


    for filename in vcc_log_data:
        if filename[1:9] == vcc_fixing_commit[0:8]:
            elements = filename.split(" ")
            preTime = elements[1][0:10]

    print("curent commit time is :" + currentTime)
    print("vcc commit time is :" + preTime)
    d1 = datetime.datetime(int(currentTime[0:4]),int(currentTime[5:7]),int(currentTime[8:10]))   # 第一个日期
    d2 = datetime.datetime(int(preTime[0:4]),int(preTime[5:7]),int(preTime[8:10]))   # 第二个日期
    interval = d1 - d2
    print(str(interval.days) + " days were between the current fixing commit and the vcc commit")



def getMessage3():

    print()
    print()
    print("--------------------------3----------------------------")
    print("| was there any other vulnerability between |")
    print("-------------------------------------------------------")

    log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", fixing_commit).splitlines()
    vcc_log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", vcc_fixing_commit).splitlines()

    currentTime = ""
    preTime = ""


    flag = 0
    count = 0
    for filename in log_data:
        if filename[1:9] == fixing_commit[0:8]:
            flag = 1

        count = count + 1
        if filename[1:9] == vcc_fixing_commit[0:8]:
            flag = 0
            break
    print()

    print("there are " + str(count) + " commits or vulnerabilities between the commit and the vcc commit")
    print()
    print()



def outputMessage():

    getMessage3()



def changeConfigue(param):
    global remote_link
    global local_link
    global fixing_commit
    global vcc_fixing_commit
    global repo


    if param == 1:
        print()
        print("==================================cxf-fediz_3==========================================")
        print()
        remote_link = "https://github.com/apache/cxf-fediz"
        local_link = "cxf-fediz_3"
        fixing_commit = "c68e4820816c19241568f4a8fe8600bffb0243cd"
        vcc_fixing_commit = "f0259cf598f2b078634af44b37d9e301b487d29e"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 2:
        print()
        print("==================================jackrabbit_3==========================================")
        print()
        remote_link = "https://github.com/apache/jackrabbit"
        local_link = "jackrabbit_3"
        fixing_commit = "db26ade17d791bbb4e4771ed9650ec1159a541ff"
        vcc_fixing_commit = "c38ebb9b69418f211151e23e2b652921d27b6c96"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 3:
        print()
        print("===================================storm_3=========================================")
        print()
        remote_link = "https://github.com/apache/storm"
        local_link = "storm_3"
        fixing_commit = "f61e5daf299d6c37c7ad65744d02556c94a16a4"
        vcc_fixing_commit = "7029aee576cff6d7159e9e1a991bb02aaf0d4cd8"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 4:
        print()
        print("==================================jenkins==========================================")
        print()
        remote_link = "https://github.com/jenkinsci/jenkins"
        local_link = "jenkins"
        fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
        vcc_fixing_commit = "7b1f8e96a8d"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 5:
        print()
        print("==================================struts==========================================")
        print()
        remote_link = "https://github.com/apache/struts"
        local_link = "struts"
        fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"
        vcc_fixing_commit = "0c543aef31"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 6:
        print()
        print("===================================cxf-fediz=========================================")
        print()
        remote_link = "https://github.com/apache/cxf-fediz"
        local_link = "cxf-fediz"
        fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"
        vcc_fixing_commit = "cc36307d5"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)

changeConfigue(2)
outputMessage()
'''
changeConfigue(2)
outputMessage()
'''
'''

changeConfigue(3)
outputMessage()
'''