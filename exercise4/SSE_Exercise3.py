import numpy as np
import pandas as pd
import os
import datetime
import time
from datetime import datetime

showflag = False



# Specify git executable file for GitPython in Jupyter Notebook (In IDE, it can still work without this line.)
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "C:\Program Files\Git\cmd\git.exe"
os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/usr/bin/git"
# os.environ["GIT_PYTHON_GIT_EXECUTABLE"] = "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (3.0.2)"

import git
from git import RemoteProgress

from git import Repo
import matplotlib.pyplot as plt
import seaborn as sns

local_link_path = "/Users/lvpeizong/Downloads/Project/Python/Git2/"
# %matplotlib inline

class Progress(RemoteProgress):
    def update(self, op_code, cur_count, max_count=None, message=''):
        print(self._cur_line)


'''
remote_link = "https://github.com/jenkinsci/jenkins"
local_link = "storm"
fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
'''
'''
remote_link = "https://github.com/apache/struts"
local_link = "struts"
fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"



'''
remote_link = "https://github.com/apache/cxf-fediz"
local_link = "cxf-fediz"
fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"



# Uncomment to clone
# Repo.clone_from(remote_link, local_link, progress=Progress())

repo = Repo(local_link)
# repo.git.checkout(fixing_commit)

def getMessage1():

    print()
    print()
    print("--------------------------1----------------------------")
    print("| What was the message and title of the fixing commit |")
    print("-------------------------------------------------------")

    show_data = repo.git.show("-s", fixing_commit).splitlines()
    comments = ""
    count = 0
    for line in show_data:
        count = count + 1
        if count == 3:
            print("The message and title of the fixing commit is:")
        if count <= 3:
            continue
        print(line)


def getFilelist():

    show_data = repo.git.show(fixing_commit).splitlines()
    comments = ""
    filenum = 0
    diff = []
    filename = ""
    filelist = []
    for line in show_data:
        if line[0:4] == "diff":
            filenum = filenum + 1
            diff = line.split(" ")
            filename = diff[2][diff[2].index("/") + 1 : len(diff[2])]
            filelist.append(filename)

    return filelist


def getLimitFilelist():

    return getFilelist()

    filelist = getFilelist()
    limitFilelist = []
    filenum = 0
    for line in filelist:
        filenum = filenum + 1
        if filenum >= 6:
            break
        limitFilelist.append(line)

    return limitFilelist

def getMessage2():
    print()
    print()
    print("--------------------------2---------------------------------")
    print("| How many total files were affected in the fixing commit? |")
    print("------------------------------------------------------------")

    filelist = getLimitFilelist()
    print(len(filelist))
    print("they are:")
    for filename in filelist:
        print(filename)



def getMessage3():
    print()
    print()
    print("-----------------------------3------------------------------------")
    print("| How many total directories were affected in the fixing commit? |")
    print("------------------------------------------------------------------")



    folderlist = []
    foldername = ""
    filelist = getFilelist()
    for filename in filelist:
        foldername = filename[filename.index("/") + 1: filename.rindex("/")]
        if foldername not in folderlist:
            folderlist.append(foldername)

    print(len(folderlist))

    print("they are:")
    for line in folderlist:
        print(line)

def getMessage4():
    print()
    print()
    print("---------------------------------------4-------------------------------------------")
    print("| How many total lines of code (including comments and blank lines) were deleted? |")
    print("-----------------------------------------------------------------------------------")


    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "-" and line[0:3] != "---":
            difflines.append(line)

    print(len(difflines))


def getMessage5():
    print()
    print()
    print("-------------------------------------5-------------------------------------------")
    print("| How many total lines of code (including comments and blank lines) were added? |")
    print("---------------------------------------------------------------------------------")

    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "+" and line[0:3] != "+++":
            difflines.append(line)

    print(len(difflines))


def getMessage6():
    print()
    print()
    print("-------------------------------------6--------------------------------------------")
    print("| How many total lines of code (excluding comments and blank lines) were deleted? |")
    print("----------------------------------------------------------------------------------")


    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "-" and line[0:3] != "---":
            if(line.replace("-","").replace(" ","") == ""):
                continue
            if line.replace(" ","")[0:2] == "-*" or line.replace(" ","")[0:2] == "-/*" or line.replace(" ","")[0:3] == "-//" :
                continue
            difflines.append(line)

    print(len(difflines))

def getMessage7():
    print()
    print()
    print("-------------------------------------7-------------------------------------------")
    print("| How many total lines of code (excluding comments and blank lines) were added? |")
    print("---------------------------------------------------------------------------------")

    show_data = repo.git.show(fixing_commit).splitlines()
    difflines = []
    for line in show_data:
        if line[0:1] == "+" and line[0:3] != "+++":
            if(line.replace("-","").replace(" ","") == ""):
                continue
            if line.replace(" ","")[0:2] == "+*" or line.replace(" ","")[0:2] == "+/*" or line.replace(" ","")[0:3] == "+//" :
                continue
            difflines.append(line)

    print(len(difflines))

def getMessage8():
    print()
    print()
    print("----------------------------------------------8--------------------------------------------------------")
    print("| How many days were between the current fixing commit and the previous commit of each affected file? |")
    print("-------------------------------------------------------------------------------------------------------")

    filelist = getLimitFilelist()
    total = 0
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%h %ad%x09%an%x09%s'","--date=short", filename).splitlines()
        print()
        print("filename is :" + filename)

        flag = 0
        currentTime = ""
        preTime = ""
        for line in log_data:
            if flag == 1:
                elements = line.split(" ")
                preTime = elements[1][0:10]
                break
            if line[1:9] == fixing_commit[0:8]:
                elements = line.split(" ")
                currentTime = elements[1][0:10]
                flag = 1
        if preTime == "":
            print("there is no previous commit for this file")
        else:

            print("current commit time is :" + currentTime)
            print("previous commit time is :" + preTime)
            d1 = datetime(int(currentTime[0:4]),int(currentTime[5:7]),int(currentTime[8:10]))   # 第一个日期
            d2 = datetime(int(preTime[0:4]),int(preTime[5:7]),int(preTime[8:10]))   # 第二个日期
            interval = d1 - d2
            print(str(interval.days) + " days were between the current fixing commit and the previous commit")
            total = total + interval.days
        print(total/len(filelist))

def getMessage9():
    print()
    print()
    print("---------------------------------------9----------------------------------")
    print(" How many time has each affected file of the current fixing commit been   ")
    print(" modified in the past since their creation (including rename of the file)?")
    print("--------------------------------------------------------------------------")


    filelist = getLimitFilelist()
    total = 0
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()
        print()
        print("filename is :" + filename)

        print(str(len(log_data)) + " times")
        total = total + len(log_data)
    print(total/len(filelist))

def getTotalAuthorList():
    total_author_list = []
    filelist = getFilelist()
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()

        flag = 0
        currentTime = ""
        preTime = ""
        for line in log_data:
            if line[1:len(line) - 1] not in total_author_list:
                total_author_list.append(line[1:len(line) - 1])
    return total_author_list

def getMessage10():
    print()
    print()
    print("-------------------------------10---------------------------------------")
    print("Which developers have modified each affected file since its creation")
    print("----------------------------------------------------------------------")

    filelist = getLimitFilelist()
    totalnum = 0
    for filename in filelist:
        log_data = repo.git.log("--pretty=format:'%an'", filename).splitlines()
        print()
        print("filename is :" + filename)

        flag = 0
        currentTime = ""
        preTime = ""
        author_list = []
        for line in log_data:
            if line[1:len(line) - 1] not in author_list:
                author_list.append(line[1:len(line) - 1])

        totalnum = totalnum + len(author_list)
        print("the author is:")
        for line in author_list:
            print(line)
    print("average num:")
    print(totalnum/len(filelist))

def getMessage11():
    print()
    print()
    print("-------------------------------11---------------------------------------")
    print(" how many commits have each of them submitted?")
    print(" are the involving developers experienced or new ones or both?")
    print("----------------------------------------------------------------------")


    total_author_list = getTotalAuthorList()
    for author_name in total_author_list:
        print()
#        print(author_name)
        log_data = repo.git.log("--oneline", "--author=" + author_name)
        print(str(len(log_data)) + " commits")
#        if len(log_data) > 100:
#            print("experienced")
#        else:
#            print("new ones")

    print("total_author_list:")
    print(len(total_author_list))


def outputMessage():

    getMessage1()
    getMessage2()
    getMessage3()
    getMessage4()
    getMessage5()
    getMessage6()
    getMessage7()
    getMessage8()
    getMessage9()
    getMessage10()
    getMessage11()


def changeConfigue(param):
    global remote_link
    global local_link
    global fixing_commit
    global repo

    if param == 1:
        remote_link = "https://github.com/apache/cxf-fediz"
        local_link = local_link_path + "cxf_fediz"
        fixing_commit = "c68e4820816c19241568f4a8fe8600bffb0243cd"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
        print()
        print("==================================cxf_fediz==========================================")
        print()
    elif param == 2:
        remote_link = "https://github.com/apache/jackrabbit"
        local_link = local_link_path + "jackrabbit"
        fixing_commit = "09393f93862923e4c8a2f8c7d1236e1a5d3373b5"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
        print()
        print("==================================jackrabbit==========================================")
        print()
    elif param == 3:
        remote_link = "https://github.com/apache/storm"
        local_link = local_link_path + "storm"
        fixing_commit = "f61e5daf299d6c37c7ad65744d02556c94a16a4"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
        print()
        print("===================================storm=========================================")
        print()

'''

changeConfigue(1)
outputMessage()

changeConfigue(2)
outputMessage()

changeConfigue(3)
outputMessage()
'''

def getChangeArr():

    show_data = repo.git.show("-l", fixing_commit).splitlines()
    comments = ""
    count = 0
    deleteIndex = 0
    deleteLength = 0
    addIndex = 0
    addLength = 0
    changeArr = []
    deleteSubLines = []
    addSubLines = []
    deleteLines = []
    addLines = []
    fileLists = []
    totalSubLists = []
    totalLists = []
    deleteLineNum = 0
    addLineNum = 0
    for line in show_data:
        if line[0:4] == "diff":
#            print("diff")

            diff = line.split(" ")
            filename = diff[2][diff[2].index("/") + 1 : len(diff[2])]
            if filename.count(".java") == 0:
                continue
#            print(filename)
            totalSubLists.append(diff[2][diff[2].index("/") + 1 : len(diff[2])])
            if len(deleteSubLines) > 0 or len(addSubLines) > 0 :
                deleteSubLines = []
                addSubLines = []
            totalSubLists.append(deleteSubLines)
            totalSubLists.append(addSubLines)
            totalLists.append(totalSubLists)

            totalSubLists = []
            
        subLine = line[0:2]
        #print(subLine)
        if subLine == "@@":
            changeInfo = line.split(" ")
            deleteIndex = changeInfo[1].split(",")[0]
            deleteIndex = deleteIndex[1:len(deleteIndex)]
            deleteLength = changeInfo[1].split(",")[1]
            addIndex = changeInfo[2].split(",")[0]
            addIndex = addIndex[1:len(addIndex)]
            addLength = changeInfo[2].split(",")[1]
            changeSubArr = []
            changeSubArr.append(deleteIndex)
            changeSubArr.append(deleteLength)
            changeSubArr.append(addIndex)
            changeSubArr.append(addLength)
            changeArr.append(changeSubArr)
            deleteLineNum = int(deleteIndex) - 1
            addLineNum = int(addIndex) - 1
            continue
        if line[0:1] == "-" and line[0:3] != "---":
            deleteLineNum = deleteLineNum + 1
#            print(deleteLineNum)
#            print(deleteLineNum)
#            print(line)
            deleteSubLines.append(deleteLineNum)
            continue
        if line[0:1] == "+" and line[0:3] != "+++":
            addLineNum = addLineNum + 1
            addSubLines.append(addLineNum)
            continue
        deleteLineNum = deleteLineNum + 1
        addLineNum = addLineNum + 1
    return totalLists


def showChangeArr():
    arr1, arr2 = getChangeArr()
    print("-")
    for line in arr1:
        print(line)
    print("+")
    for line in arr2:
        print(line)


def getDeleteCommit():
    totalArr = getChangeArr()
    commitArr = []
#    commitArrWithoutRepeat = []
    for line in totalArr:

        for deleteLine in line[1]:
            show_data = repo.git.blame("-L "+str(deleteLine)+","+str(deleteLine), "./" + line[0] ,fixing_commit + "^").splitlines()    
            for showLine in show_data:
                commitArr.append(showLine.split(" ")[0])    

#    commitArrWithoutRepeat = list(set(commitArr))
#    for commitLine in commitArr:
#        print(commitLine)
#    print()
#    for commitLine in commitArrWithoutRepeat:
#        print(commitLine + ":" + str(commitArr.count(commitLine)))
    return commitArr


def getAddCommit():
    totalArr = getChangeArr()
#    print("-----")
    commitArr = []
#    commitArrWithoutRepeat = []
    startLine = 0
    endLine = 0
    startScopeLine = 0
    endScopeLine = 0
    lastLine = 0
    for line in totalArr:

#        print(line[0])
        for addLine in line[2]:
#            print(startLine)
#            print(endLine)
#            print("add" + str(addLine))
            if startLine == 0 and endLine == 0:
                startLine = addLine
                endLine = addLine
            if addLine == endLine + 1:
                endLine = addLine
            
            if addLine > endLine + 1 or ( addLine == endLine and addLine == len(line[2])):
                show_data = repo.git.blame("-L "+str(startLine)+","+str(startLine), "./" + line[0] ,fixing_commit ).splitlines()    
                startScopeLine , endScopeLine = findTheMiniScope("./" + line[0] , startLine)
                show_data = repo.git.blame("-L "+str(endLine)+","+str(endLine), "./" + line[0] ,fixing_commit ).splitlines()    
                startScopeLine1 , endScopeLine1 = findTheMiniScope("./" + line[0] , endLine)
                if startScopeLine1 < startScopeLine:
                    startScopeLine = startScopeLine1
                if endScopeLine1 > endScopeLine:
                    endScopeLine = endScopeLine1
#                print("startScopeLine")
#                print(startScopeLine)
#                print("endScopeLine")
#                print(endScopeLine)
                addCommit = getScopeCommit(startScopeLine , endScopeLine , "./" + line[0])
                commitArr.append(addCommit)    
                startLine = addLine
                endLine = addLine


#    commitArrWithoutRepeat = list(set(commitArr))

#    for commitLine in commitArr:
#        print(commitLine)
#    print()
#    for commitLine in commitArrWithoutRepeat:
#        print(commitLine + ":" + str(commitArr.count(commitLine)))
#            for showLine in show_data:
#                commitArr.append(showLine.split(" ")[0])    

#    for commitLine in commitArr:
#        print(commitLine)
    return commitArr

def findTheMiniScope(filename , line):
    currLine = line
    startLine = 0
    endLine = 0
    beginBrace = 0
    endBrace = 0
    remain = 0
    while currLine > 0:
        show_data = repo.git.blame("-L "+ str(currLine) +"," + str(currLine) , filename ,fixing_commit ).splitlines()    
        beginBrace = beginBrace + ("".join(show_data)).count("{")
        endBrace = endBrace + ("".join(show_data)).count("}")
        if currLine == line :
            remain = ("".join(show_data)).count("{")

        if beginBrace - endBrace > remain :
            startLine = currLine
            break
        currLine = currLine - 1
    if currLine == 0:
        startLine = 1

    currLine = line

    beginBrace = 0
    endBrace = 0
    show_data = repo.git.blame("-L "+ str(currLine)  , filename ,fixing_commit ).splitlines() 
    for line_data in show_data:
        beginBrace = beginBrace + ("".join(line_data)).count("{")
        endBrace = endBrace + ("".join(line_data)).count("}")
        if currLine == line :
            remain = ("".join(line_data)).count("}")

#        print(line_data)
#        print(beginBrace)
#        print(endBrace)
#        print()
#        print(remain)
#        print(currLine)
#        print(line)

        if endBrace - beginBrace > remain:
            endLine = currLine
            break
        currLine = currLine + 1
    if currLine != endLine:
        endLine = currLine - 1

    return startLine , endLine

def getScopeCommit(startLine , endLine , filename):

    show_data = repo.git.blame("-L "+ str(startLine) +"," + str(endLine) , filename ,fixing_commit ).splitlines()   
    currentCommit = ""
    maxUnixTime = 0
    maxCommit = ""
    for line in show_data:
        print(line)
        currentCommit = line.split()[0]
        
        timeStr = line[line.index("(")+1:line.index(")")].split()
        timeStr = timeStr[len(timeStr)-4:len(timeStr)-2]
        if len(timeStr) != 0:
            year = int(timeStr[0].split("-")[0])
            month = int(timeStr[0].split("-")[1])
            day = int(timeStr[0].split("-")[2])
            hour = int(timeStr[1].split(":")[0])
            minute = int(timeStr[1].split(":")[1])
            second = int(timeStr[1].split(":")[2])


            d = datetime(year, month, day, hour, minute,second)
            unixtime = time.mktime(d.timetuple())
            
            if unixtime > maxUnixTime and fixing_commit[0:9] != currentCommit :
                maxCommit = currentCommit
                maxUnixTime = unixtime

    return maxCommit

def getTheCommit():

    commitArrWithoutRepeat = []
    maxCount = 0
    finalCommit = ""
    deleteCommits = getDeleteCommit()
    addCommits = getAddCommit()
        
#    print(deleteCommits)
#    print(addCommits)
    addCommits.extend(deleteCommits)

    commitArrWithoutRepeat = list(set(addCommits))

    for commitLine in commitArrWithoutRepeat:
#        print(commitLine + ":" + str(addCommits.count(commitLine)))
        if addCommits.count(commitLine) > maxCount :
            maxCount = addCommits.count(commitLine)
            finalCommit = commitLine

    print(maxCount)
    print(finalCommit)
    return finalCommit

def showResult(param):

    global remote_link
    global local_link
    global fixing_commit
    global repo

    if param == 1:
        print()
        print("==================================jenkins==========================================")
        print()
        remote_link = "https://github.com/jenkinsci/jenkins"
        local_link = "jenkins"
        fixing_commit = "7b1f8e96a8d97dd09e5e093fcdb010b3295acc77"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 2:
        print()
        print("==================================struts==========================================")
        print()
        remote_link = "https://github.com/apache/struts"
        local_link = "struts"
        fixing_commit = "7e6f641ebb142663cbd1653dc49bed725edf7f56"

        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)
    elif param == 3:
        print()
        print("===================================cxf-fediz=========================================")
        print()
        remote_link = "https://github.com/apache/cxf-fediz"
        local_link = "cxf-fediz"
        fixing_commit = "acdbe8c213576792dd95d87315bcc181ea61b57f"
        # Repo.clone_from(remote_link, local_link, progress=Progress())
        repo = Repo(local_link)
        repo.git.checkout(fixing_commit)

    fixing_commit = getTheCommit()

    #repo = Repo(local_link)
    #repo.git.checkout(fixing_commit)

    print(fixing_commit)

    #outputMessage()

showResult(3)

def test():
    global remote_link
    global local_link
    global fixing_commit
    global repo

    remote_link = "https://github.com/apache/jackrabbit"
    local_link = local_link_path + "jackrabbit"
    fixing_commit = "09393f93862923e4c8a2f8c7d1236e1a5d3373b5"
    # Repo.clone_from(remote_link, local_link, progress=Progress())
    repo = Repo(local_link)
    repo.git.checkout(fixing_commit)
    print()
    print("==================================jackrabbit==========================================")
    print()
    


    outputMessage()
    print()
    print("==================================jackrabbit==============2============================")
    print()
    fixing_commit = "283df6f101"

    repo = Repo(local_link)
    repo.git.checkout(fixing_commit)

    outputMessage()
#test()